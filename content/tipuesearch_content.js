var tipuesearch = {"pages": [{'title': 'About', 'text': ' https://github.com/mdecycu/cmsite \n https://github.com/hong41223129/cp2023_ag4 (倉儲) \n 全體組員 \n 41223129 https://github.com/hong41223129/cp2023 \n 41223110 https://github.com/41223110/cp2023 \n 41223134 https://github.com/41223134/cp2023 \n 41223137 https://github.com/41223137/cp2023 \n 41223138 https://github.com/41223138/cp2023 \n 41223130 https://github.com/joeisme1208/cp2023 \n 41223139 https://github.com/weikai557/cp2023 \n 使用replit連接團體倉儲時請修改為Python \n', 'tags': '', 'url': 'About.html'}, {'title': '國旗', 'text': '', 'tags': '', 'url': '國旗.html'}, {'title': '台灣', 'text': '// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China // 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621 // cc roc_flag_in_gd.c -lgd -lm to link with gd and math library // https://www.rapidtables.com/web/color/RGB_Color.html // 幾何形狀著色與繪圖練習 // 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖 #include <stdio.h> #include <gd.h> #include <math.h> \n void draw_roc_flag(gdImagePtr img); void draw_white_sun(gdImagePtr img, int x, int y, int size, int color); \n int main() {  // width 3: height 2  int width = 1200;  // 國旗長寬比為 3:2  int height = (int)(width*2.0 / 3.0); \n gdImagePtr img = gdImageCreateTrueColor(width, height);  gdImageAlphaBlending(img, 0); \n draw_roc_flag(img); \n FILE *outputFile = fopen("./../images/roc_flag_in_gd.png", "wb");  if (outputFile == NULL) {  fprintf(stderr, "Error opening the output file.\\n");  return 1;  }  gdImagePngEx(img, outputFile, 9);  fclose(outputFile);  gdImageDestroy(img);  return 0; } \n void draw_roc_flag(gdImagePtr img) {  int width = gdImageSX(img);  int height = gdImageSY(img);  int red, white, blue;  // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處  int center_x = (int)(width/4);  int center_y = (int)(height/4);  // gdImageFilledEllipse 需以長寬方向的 diameter 作圖  // 由於中央白日圓形的半徑為青天寬度的 1/8  // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8  // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8  int sun_radius = (int)(width/8);  // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑  int white_circle_dia = sun_radius;  // 中央藍色圓形半徑為中央白日的 1又 2/15  int blue_circle_dia = white_circle_dia + white_circle_dia*2/15;  // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值  red = gdImageColorAllocate(img, 255, 0, 0); // 紅色  white = gdImageColorAllocate(img, 255, 255, 255); // 白色  blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色  // 根據畫布大小塗上紅色長方形區域  gdImageFilledRectangle(img, 0, 0, width, height, red);  // 青天面積為整面國旗的 1/4, 也是採用長方形塗色  gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);  // 先設法以填色畫出六個白色堆疊菱形  draw_white_sun(img, center_x, center_y, sun_radius, white);  // 利用一個藍色大圓與白色小圓畫出藍色環狀  gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);  gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white); \n } \n void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {  // M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位  // 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度  float deg = M_PI/180;  // 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度  // 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小  float sr = sun_radius/tan(75*deg);  int ax, ay, bx, by, dx, dy, ex, ey;  gdPoint points[4];  /* 在塗上十二道光芒中的單一菱形區域之前, 先以座標點畫線測試是否正確  ax = center_x;  ay = center_y - sun_radius;  bx = center_x - sun_radius*tan(15*deg);  by = center_y;  ex = center_x;  ey = center_y + sun_radius;  dx = center_x + sun_radius*tan(15*deg);  dy = center_y;  // AB  gdImageLine(img, ax, ay, bx, by, color);  // BE  gdImageLine(img, bx, by, ex, ey, color);  // ED  gdImageLine(img, ex, ey, dx, dy, color);  // DA  gdImageLine(img, dx, dy, ax, ay, color);  */  ax = center_x;  ay = center_y - sun_radius;  bx = center_x - sun_radius*tan(15*deg);  by = center_y;  ex = center_x;  ey = center_y + sun_radius;  dx = center_x + sun_radius*tan(15*deg);  dy = center_y;  // 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域  for (int i=1;i<=6;i++){  // A  points[0].x = ax+sun_radius*sin(30*deg*i);  points[0].y = ay+sun_radius-sun_radius*cos(30*deg*i);  // B  points[1].x = bx+sr-sr*cos(30*deg*i);  points[1].y = by-sr*sin(30*deg*i);  // E  points[2].x = ex-sun_radius*sin(30*deg*i);  points[2].y = ey-(sun_radius-sun_radius*cos(30*deg*i));  // D  points[3].x = dx-(sr-sr*cos(30*deg*i));  points[3].y = dy+sr*sin(30*deg*i);  // 對菱形區域範圍塗色  gdImageFilledPolygon(img, points, 4, color);  // 在菱形區域外圍畫線, 明確界定菱形範圍  gdImagePolygon(img, points, 4, color);  } } \n \n', 'tags': '', 'url': '台灣.html'}, {'title': '美國', 'text': '#include <stdio.h> #include <gd.h> #include <math.h> \n void draw_usa_flag(gdImagePtr img); void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle); \n int main() {  int width = 800;  int height = (int)(width / 1.9); \n gdImagePtr img = gdImageCreateTrueColor(width, height);  gdImageAlphaBlending(img, 0); \n draw_usa_flag(img); \n FILE *outputFile = fopen("./../images/usa_flag.png", "wb");  if (outputFile == NULL) {  fprintf(stderr, "打开输出文件时出错。\\n");  return 1;  } \n gdImagePngEx(img, outputFile, 9);  fclose(outputFile);  gdImageDestroy(img); \n return 0; } \n void draw_usa_flag(gdImagePtr img) {  int width = gdImageSX(img);  int height = gdImageSY(img);  int red, white, blue;  // 国旗颜色  red = gdImageColorAllocate(img, 178, 34, 52); // 红色条纹  white = gdImageColorAllocate(img, 255, 255, 255); // 白色条纹  blue = gdImageColorAllocate(img, 60, 59, 110); // 蓝色矩形 \n int stripe_height = height / 13;  int stripe_width = width;  int star_size = (int)(0.0308 * height); // 星星大小 \n for (int y = 0; y < height; y += stripe_height) {  if (y / stripe_height % 2 == 0) {  gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);  } else {  gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);  }  } \n gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue); \n int star_spacing_x = (int)(0.129 * height); // 横向星星之间的间距  int star_spacing_y = (int)(0.054 * height); // 纵向星星之间的间距  int star_start_x = (int)(0.125 * height); // 星星的起始X位置  int star_start_y = (int)(0.0485 * height); // 星星的起始Y位置 \n for (int row = 0; row < 9; row++) {  int starsPerRow = (row % 2 == 0) ? 6 : 5; \n // 计算2、4、6和8排星星的偏移量  int offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0; \n for (int star = 0; star < starsPerRow; star++) {  int x = star_start_x + star * star_spacing_x + offset_x; \n // 旋转角度（以弧度为单位）  double rotation_angle = M_PI / 5; // 忘記多少度的旋转 \n int y = star_start_y + row * star_spacing_y;  draw_star(img, x, y, star_size, white, rotation_angle);  }  } } \n void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {  gdPoint points[10]; \n for (int i = 0; i < 10; i++) {  double angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;  int radius = (i % 2 == 0) ? size : size / 2;  points[i].x = x + radius * cos(angle);  points[i].y = y + radius * sin(angle);  } \n // 用指定的颜色填充星星  gdImageFilledPolygon(img, points, 10, color); } \n \n', 'tags': '', 'url': '美國.html'}, {'title': '日本', 'text': '#include <stdio.h> #include <gd.h> \n int main() { int width = 250; // 日本国旗的宽度 int height = 150; // 日本国旗的高度 \n gdImagePtr img = gdImageCreateTrueColor(width, height); \n // 分配白色 int white = gdImageColorAllocate(img, 255, 255, 255); gdImageFill(img, 0, 0, white); \n // 分配红色 int red = gdImageColorAllocate(img, 255, 0, 0); \n // 启用抗锯齿 gdImageSetAntiAliased(img, red); \n // 绘制红色圆圈 int circle_radius = 80; // 减小半径以使边缘更圆润 int circle_x = width / 2; int circle_y = height / 2; gdImageFilledEllipse(img, circle_x, circle_y, circle_radius, circle_radius, red); \n FILE *outputFile = fopen("japan_flag_smooth.png", "wb"); if (outputFile == NULL) { fprintf(stderr, "Error opening the output file.\\n"); return 1; } \n gdImagePngEx(img, outputFile, 9); fclose(outputFile); gdImageDestroy(img); \n return 0; } \n \n', 'tags': '', 'url': '日本.html'}, {'title': 'gd', 'text': '#include <stdio.h> #include <gd.h> #include <math.h> \n int main() {  int width = 800;  int height = 600; \n gdImagePtr img = gdImageCreateTrueColor(width, height);  gdImageAlphaBlending(img, 0); \n FILE *outputFile = fopen("hellogd.png", "wb");  if (outputFile == NULL) { \n fprintf(stderr, "Error opening the output file.\\n"); \n return 1;  } \n int red = gdImageColorAllocate(img, 255, 0, 0);  int blue = gdImageColorAllocate(img, 0, 0, 255);  int black = gdImageColorAllocate(img, 0, 0, 0);  int white = gdImageColorAllocate(img, 255, 255, 255);  // 長方形塗色  gdImageFilledRectangle(img, 0, 0, width, height, white);  gdImageFilledRectangle(img, 0, 0, (int)width/4, (int)height/4, blue);  // 橢圓形塗色  gdImageFilledEllipse(img, (int)width*3/4, (int)height/4, (int)width/4, (int)width/4, red);  // 橢圓形畫線  gdImageEllipse(img, (int)width*3/4, (int)height*3/4, (int)width/4, (int)width/4, red);  // 畫直線  gdImageLine(img, (int)width/2, (int)height/2, (int)width/2, (int)height/2 + 100, blue); \n // 多邊形畫線  gdPoint points[4];  points[0].x = (int)width/4;  points[0].y = (int)height*3/4;  points[1].x = points[0].x + 100;  points[1].y = points[0].y;  points[2].x = points[1].x;  points[2].y = points[1].y + 100;  points[3].x = points[2].x - 100;  points[3].y = points[2].y;  gdImagePolygon(img, points, 4, black); \n // 多邊形塗色  gdPoint points2[4];  points2[0].x = (int)width/3;  points2[0].y = (int)height/2;  points2[1].x = points2[0].x + 100;  points2[1].y = points2[0].y;  points2[2].x = points2[1].x;  points2[2].y = points2[1].y + 100;  points2[3].x = points2[2].x - 150;  points2[3].y = points2[2].y;  gdImageFilledPolygon(img, points2, 4, red); \n gdImagePngEx(img, outputFile, 9);  fclose(outputFile);  gdImageDestroy(img);  return 0; } \n \n #include <stdio.h> #include <gd.h> #include <math.h> \n // Declare the rotation function void rotateFilledPolygon(int x_orig, int y_orig, double rotation_ang, gdPoint *points, int num_points) {  int i;  double angle_rad = rotation_ang * M_PI / 180.0; \n for (i = 0; i < num_points; i++) {  int x = points[i].x - x_orig;  int y = points[i].y - y_orig; \n points[i].x = x_orig + (int)(x * cos(angle_rad) - y * sin(angle_rad));  points[i].y = y_orig + (int)(x * sin(angle_rad) + y * cos(angle_rad));  } } \n int main() {  int width = 800;  int height = 600; \n gdImagePtr img = gdImageCreateTrueColor(width, height);  gdImageAlphaBlending(img, 0); \n FILE *outputFile = fopen("hellogd2.png", "wb");  if (outputFile == NULL) {  fprintf(stderr, "Error opening the output file.\\n");  return 1;  } \n int red = gdImageColorAllocate(img, 255, 0, 0);  int blue = gdImageColorAllocate(img, 0, 0, 255);  int black = gdImageColorAllocate(img, 0, 0, 0);  int white = gdImageColorAllocate(img, 255, 255, 255); \n gdImageFilledRectangle(img, 0, 0, width, height, white);  gdImageFilledRectangle(img, 0, 0, (int)width / 4, (int)height / 4, blue); \n gdImageFilledEllipse(img, (int)width * 3 / 4, (int)height / 4, (int)width / 4, (int)width / 4, red);  gdImageEllipse(img, (int)width * 3 / 4, (int)height * 3 / 4, (int)width / 4, (int)width / 4, red);  gdImageLine(img, (int)width / 2, (int)height / 2, (int)width / 2, (int)height / 2 + 100, blue); \n gdPoint points[4];  points[0].x = (int)width / 4;  points[0].y = (int)height * 3 / 4;  points[1].x = points[0].x + 100;  points[1].y = points[0].y;  points[2].x = points[1].x;  points[2].y = points[1].y + 100;  points[3].x = points[2].x - 100;  points[3].y = points[2].y; \n // Call the rotation function multiple times  for (int i = 0; i < 4; i++) {  rotateFilledPolygon((int)width / 4 + 50, (int)height * 3 / 4 + 50, 30.0, points, 4);  gdImagePolygon(img, points, 4, black);  } \n gdPoint points2[4];  points2[0].x = (int)width / 3;  points2[0].y = (int)height / 2;  points2[1].x = points2[0].x + 100;  points2[1].y = points2[0].y;  points2[2].x = points2[1].x;  points2[2].y = points2[1].y + 100;  points2[3].x = points2[2].x - 150;  points2[3].y = points2[2].y; \n // Call the rotation function multiple times  for (int i = 0; i < 12; i++) {  //rotateFilledPolygon((int)width / 3 + 50, (int)height / 2 + 50, 30.0, points2, 4);  rotateFilledPolygon(500, 200, 30.0, points2, 4);  gdImageFilledPolygon(img, points2, 4, red);  } \n gdImagePngEx(img, outputFile, 9);  fclose(outputFile);  gdImageDestroy(img); \n return 0; } \n \n', 'tags': '', 'url': 'gd.html'}, {'title': '個人學習心得', 'text': '41223129:我在計算機概論學到許多程式，包含網路設定，網站架設，程式繪製，我在製作的過程中，老師發現我的程式內有一個問題，老師協助我們修正問題，並解說問題原因，在過程中我也發現到團隊合作的重要性，可以 盡自己的一份心力來協助組員，我很榮幸能夠協助同學，也很感謝老師傳授電腦知識理論。 \n 41223110:這是我第一次接觸到 GitHub 與 Replit 。前幾堂課我其實不懂要做什麼也很怕做錯一步就要全部重來，導致我前幾週都處在混亂之中，只能反覆觀看老師所錄製的上課內容並一步一步的做，但在上了越來越多次課程之後我發現其實沒有我想像中的難，只要花時間去了解其實就不難了，從一開始的網路設定與網頁架設和之後的維護網站，都是需要花費時間才能完成的，雖然過程中遇到了不少的問題但在藉由同學和老師的幫助下也完成了許多關於網路和程式相關的設定與了解。 \n 41223134:在上計算機程式的過程中我遇到許多障礙，不論是網路設定、架設個人網站還是運用程式繪圖，當我們過了期中考還卡在ipv6的網路設定時，老師還是不厭其煩地重頭教好幾次，以及不斷的告訴我們程式對未來的趨勢及對我們的幫助。雖然在課堂中幾乎都聽不懂，在下課後我重複看老師的操作影片，不會的程式就請教ChatGPT慢慢修改成能正確運作的程式，補足進度提升自己的能力，有心了解這堂課的內容對未來真的幫助很大! \n 41223137: 這個學期快結束了，在「計算機概論」這門課裡面我學了github跟replit。理論上每次上課都要有進度，但是有幾堂課因為處理網路問題跟小考就浪費掉一些時間了，即使本學期教學的東西不多，但能為之後的課程建立基礎。平常上課的時候雖然蠻常跟不上的，就只能靠課餘時間觀看上課的影片逐步操作，遇到仍然看不懂的也只能請教同學，同學在這學期對我的幫助也很大。 期中的期望成績我是依照當下對於自身的進度以及小考排序衡量，認為只是「期中」成績，所以寫了有點高分，後來才發現學期末成績好像也會用那個標準來看。學期下半課程上我發現在學習上有點倦怠，進而導致進度嚴重落後，不得以只好再多花幾小時認真處理好網頁維護。總結來說是希望能平穩的不要被當就好，也希望在這堂課學到的東西以後會能幫助我(๑`灬´๑)。 \n 41223138: \n 41223130: \n 41223139:', 'tags': '', 'url': '個人學習心得.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};