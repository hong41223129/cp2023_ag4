var tipuesearch = {"pages": [{'title': 'About', 'text': ' https://github.com/mdecycu/cmsite \n https://github.com/hong41223129/cp2023_ag4 (倉儲) \n 全體組員 \n 41223129 https://github.com/hong41223129/cp2023 \n 41223110 https://github.com/41223110/cp2023 \n 41223134 https://github.com/41223134/cp2023 \n 41223137 https://github.com/41223137/cp2023 \n 41223138 https://github.com/41223138/cp2023 \n 41223130 https://github.com/joeisme1208/cp2023 \n 41223139 https://github.com/weikai557/cp2023 \n 使用replit連接團體倉儲時請修改為Python \n', 'tags': '', 'url': 'About.html'}, {'title': 'gd', 'text': '\n #include <stdio.h> #include <gd.h> #include <math.h> \n int main() {  int width = 800;  int height = 600; \n gdImagePtr img = gdImageCreateTrueColor(width, height);  gdImageAlphaBlending(img, 0); \n FILE *outputFile = fopen("hellogd.png", "wb");  if (outputFile == NULL) { \n fprintf(stderr, "Error opening the output file.\\n"); \n return 1;  } \n int red = gdImageColorAllocate(img, 255, 0, 0);  int blue = gdImageColorAllocate(img, 0, 0, 255);  int black = gdImageColorAllocate(img, 0, 0, 0);  int white = gdImageColorAllocate(img, 255, 255, 255);  // 長方形塗色  gdImageFilledRectangle(img, 0, 0, width, height, white);  gdImageFilledRectangle(img, 0, 0, (int)width/4, (int)height/4, blue);  // 橢圓形塗色  gdImageFilledEllipse(img, (int)width*3/4, (int)height/4, (int)width/4, (int)width/4, red);  // 橢圓形畫線  gdImageEllipse(img, (int)width*3/4, (int)height*3/4, (int)width/4, (int)width/4, red);  // 畫直線  gdImageLine(img, (int)width/2, (int)height/2, (int)width/2, (int)height/2 + 100, blue); \n // 多邊形畫線  gdPoint points[4];  points[0].x = (int)width/4;  points[0].y = (int)height*3/4;  points[1].x = points[0].x + 100;  points[1].y = points[0].y;  points[2].x = points[1].x;  points[2].y = points[1].y + 100;  points[3].x = points[2].x - 100;  points[3].y = points[2].y;  gdImagePolygon(img, points, 4, black); \n // 多邊形塗色  gdPoint points2[4];  points2[0].x = (int)width/3;  points2[0].y = (int)height/2;  points2[1].x = points2[0].x + 100;  points2[1].y = points2[0].y;  points2[2].x = points2[1].x;  points2[2].y = points2[1].y + 100;  points2[3].x = points2[2].x - 150;  points2[3].y = points2[2].y;  gdImageFilledPolygon(img, points2, 4, red); \n gdImagePngEx(img, outputFile, 9);  fclose(outputFile);  gdImageDestroy(img);  return 0; } \n \n #include <stdio.h> #include <gd.h> #include <math.h> \n // Declare the rotation function void rotateFilledPolygon(int x_orig, int y_orig, double rotation_ang, gdPoint *points, int num_points) {  int i;  double angle_rad = rotation_ang * M_PI / 180.0; \n for (i = 0; i < num_points; i++) {  int x = points[i].x - x_orig;  int y = points[i].y - y_orig; \n points[i].x = x_orig + (int)(x * cos(angle_rad) - y * sin(angle_rad));  points[i].y = y_orig + (int)(x * sin(angle_rad) + y * cos(angle_rad));  } } \n int main() {  int width = 800;  int height = 600; \n gdImagePtr img = gdImageCreateTrueColor(width, height);  gdImageAlphaBlending(img, 0); \n FILE *outputFile = fopen("hellogd2.png", "wb");  if (outputFile == NULL) {  fprintf(stderr, "Error opening the output file.\\n");  return 1;  } \n int red = gdImageColorAllocate(img, 255, 0, 0);  int blue = gdImageColorAllocate(img, 0, 0, 255);  int black = gdImageColorAllocate(img, 0, 0, 0);  int white = gdImageColorAllocate(img, 255, 255, 255); \n gdImageFilledRectangle(img, 0, 0, width, height, white);  gdImageFilledRectangle(img, 0, 0, (int)width / 4, (int)height / 4, blue); \n gdImageFilledEllipse(img, (int)width * 3 / 4, (int)height / 4, (int)width / 4, (int)width / 4, red);  gdImageEllipse(img, (int)width * 3 / 4, (int)height * 3 / 4, (int)width / 4, (int)width / 4, red);  gdImageLine(img, (int)width / 2, (int)height / 2, (int)width / 2, (int)height / 2 + 100, blue); \n gdPoint points[4];  points[0].x = (int)width / 4;  points[0].y = (int)height * 3 / 4;  points[1].x = points[0].x + 100;  points[1].y = points[0].y;  points[2].x = points[1].x;  points[2].y = points[1].y + 100;  points[3].x = points[2].x - 100;  points[3].y = points[2].y; \n // Call the rotation function multiple times  for (int i = 0; i < 4; i++) {  rotateFilledPolygon((int)width / 4 + 50, (int)height * 3 / 4 + 50, 30.0, points, 4);  gdImagePolygon(img, points, 4, black);  } \n gdPoint points2[4];  points2[0].x = (int)width / 3;  points2[0].y = (int)height / 2;  points2[1].x = points2[0].x + 100;  points2[1].y = points2[0].y;  points2[2].x = points2[1].x;  points2[2].y = points2[1].y + 100;  points2[3].x = points2[2].x - 150;  points2[3].y = points2[2].y; \n // Call the rotation function multiple times  for (int i = 0; i < 12; i++) {  //rotateFilledPolygon((int)width / 3 + 50, (int)height / 2 + 50, 30.0, points2, 4);  rotateFilledPolygon(500, 200, 30.0, points2, 4);  gdImageFilledPolygon(img, points2, 4, red);  } \n gdImagePngEx(img, outputFile, 9);  fclose(outputFile);  gdImageDestroy(img); \n return 0; } \n \n', 'tags': '', 'url': 'gd.html'}, {'title': '個人學習心得', 'text': '41223129:我在計算機概論學到許多程式，包含網路設定，網站架設，程式繪製，我在製作的過程中，老師發現我的程式內有一個問題，老師協助我們修正問題，並解說問題原因，在過程中我也發現到團隊合作的重要性，可以 盡自己的一份心力來協助組員，我很榮幸能夠協助同學，也很感謝老師傳授電腦知識理論。 \n 41223110: \n 41223134: \n 41223137: \n 41223138: \n 41223130: \n 41223139: \n', 'tags': '', 'url': '個人學習心得.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};